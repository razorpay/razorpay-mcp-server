---
description: 
globs: 
alwaysApply: true
---

# Razorpay Tool Generator

This rule generates tool implementations for the Razorpay MCP server based on API documentation.

## Required Format

This rule requires:

1. A Razorpay API documentation URL starting with `https://razorpay.com/docs/api/`
2. The SDK function signature that the tool will call

Example of valid invocation:
```
@new-tool-from-docs.mdc @https://razorpay.com/docs/api/payment-links/create-standard/
SDK function:
func (pl *PaymentLink) Create(data map[string]interface{}, extraHeaders map[string]string) (map[string]interface{}, error) {
    url := fmt.Sprintf("/%s%s", constants.VERSION_V1, constants.PaymentLink_URL)
    return pl.Request.Post(url, data, extraHeaders)
}
```

IMPORTANT: If these details are missing or in an incorrect format, REFUSE to proceed further.

## Implementation

Before the implementation use the documentation URL provided to figure out the request contract, required parameters, descriptions of the parameters, and the response contract.

Now follow the detailed implementation guide in [pkg/razorpay/README.md](../pkg/razorpay/README.md) for creating tools and start making code changes.

Other guidelines:
1. [Razorpay Go SDK Constants](https://github.com/razorpay/razorpay-go/blob/master/constants/url.go) - Use these constants for specifying the api endpoints while writing the tests.
2. Use the payload and response from the docs provided write the positive test case for the tool.

IMPORTANT:
1. start making code changes in the same iteration itself without asking the user's input.
2. ALWAYS go through the Post Implementation steps once the code changes are done.

## Post Implementation

When linting or test errors occur:

1. Run the linter to ensure code quality
   - Use `golangci-lint run` to check for linting issues
   - Fix any issues reported by the linter

2. Run tests to verify functionality
   - Use `go test ./...` to run all tests
   - Ensure all tests pass before finalizing the tool. If any tests fail, investigate and fix the issues

IMPORTANT: Try at least two iterations of fixes for the errors before asking for help.
