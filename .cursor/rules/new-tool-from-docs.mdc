---
description: 
globs: 
alwaysApply: true
---

# Razorpay Tool Generator

This rule generates tool implementations for the Razorpay MCP server based on API documentation.

## Required Format

This rule requires:

1. A Razorpay API documentation URL starting with `https://razorpay.com/docs/api/`
2. The SDK function signature that the tool will call

Example of valid invocation:
```
@new-tool-from-docs.mdc @https://razorpay.com/docs/api/payment-links/create-standard/
SDK function:
func (pl *PaymentLink) Create(data map[string]interface{}, extraHeaders map[string]string) (map[string]interface{}, error) {
    url := fmt.Sprintf("/%s%s", constants.VERSION_V1, constants.PaymentLink_URL)
    return pl.Request.Post(url, data, extraHeaders)
}
```

If these details are missing or in an incorrect format, the rule cannot be properly applied. Rerun with the correct format shown above.

## Implementation Process

This rule follows the detailed implementation guide in [pkg/razorpay/README.md](../pkg/razorpay/README.md) for creating tools.

The generation process:

1. Extracts from API documentation:
   - Required and optional parameters
   - Parameter descriptions
   - Example request/response payloads

2. Extracts from SDK function:
   - Resource type (payments, orders, payment_links, etc.)
   - Action type (create, fetch, update, etc.)
   - HTTP method (GET, POST, etc.)
   - API path constants

3. Generates:
   - Tool function with parameter definitions
   - Handler implementation with validation logic
   - API call using the provided SDK function
   - Unit tests with positive and negative cases

## Implementation References

For detailed code patterns and examples, refer to the following sections in the [pkg/razorpay/README.md](../pkg/razorpay/README.md):

- **Tool Structure**: See the "Tool Structure" section for the function template
- **Parameter Definition**: See the "Parameter Definition" section for defining parameters
- **Parameter Validation**: See the "Parameter Validation" section for validation examples
- **Example GET/POST Endpoints**: See the example sections for complete implementation patterns
- **Unit Testing**: See the "Writing Unit Tests" section for test patterns and best practices

## Registration Steps

After generating the tool:

1. Add it to the appropriate toolset in `pkg/razorpay/tools.go` (see "Registering Tools" in README)
2. Update the main README.md to document the new tool
3. Run tests to verify functionality

## Reference URLs

- [Razorpay Go SDK Constants](https://github.com/razorpay/razorpay-go/blob/master/constants/url.go) - Use these constants for API paths
- [Razorpay API Documentation](https://razorpay.com/docs/api/) - Source of parameter information