---
description: 
globs: 
alwaysApply: true
---

# Razorpay Tool Generator

This rule generates tool implementations for the Razorpay MCP server based on API documentation.

## Required Format

This rule requires:

1. A Razorpay API documentation URL starting with `https://razorpay.com/docs/api/`
2. The SDK function signature that the tool will call

Example of valid invocation:
```
@new-tool-from-docs.mdc @https://razorpay.com/docs/api/payment-links/create-standard/
SDK function:
func (pl *PaymentLink) Create(data map[string]interface{}, extraHeaders map[string]string) (map[string]interface{}, error) {
    url := fmt.Sprintf("/%s%s", constants.VERSION_V1, constants.PaymentLink_URL)
    return pl.Request.Post(url, data, extraHeaders)
}
```

IMPORTANT: If these details are missing or in an incorrect format, REFUSE to proceed further.

## Implementation Checklist

This checklist **MUST** be included in the final response to verify all implementation steps are complete.
IMPORTANT: The LLM should include this unchecked checklist at the END of the implementation, NOT at the beginning:

- [ ] Implement tool function based on API docs
- [ ] Register tool in tools.go
- [ ] Create unit tests
- [ ] Update README.md
- [ ] Double check that we are not repeating any of the Common Issues mentioned below.(REQUIRED)
- [ ] Run linter and fix errors if any (REQUIRED)
- [ ] Run tests and fix errors if any (REQUIRED)

## ⚠️ IMMEDIATE ACTION REQUIRED ⚠️

Upon receiving this rule invocation:

1. **DO NOT** ask for user input or confirmation before implementing code
2. **DO** use the `edit_file` tool to create/modify the following files:
   - Primary implementation: `pkg/razorpay/{resource_type}.go`
   - Test implementation: `pkg/razorpay/{resource_type}_test.go`
   - Update toolset registration: `pkg/razorpay/tools.go`
   - Update the README.md

## Implementation

Before the implementation use the documentation URL provided to figure out the request contract, required parameters, descriptions of the parameters, and the response contract.

Now follow the detailed implementation guide in [pkg/razorpay/README.md](../pkg/razorpay/README.md) for creating tools and start making code changes.

Other guidelines:
1. [Razorpay Go SDK Constants](https://github.com/razorpay/razorpay-go/blob/master/constants/url.go) - Use these constants for specifying the api endpoints while writing the tests.
2. Use the payload and response from the docs provided write the positive test case for the tool.

IMPORTANT: You **MUST** ALWAYS go through the Post Implementation steps once the code changes are done.

## Implementation References

For detailed code patterns and examples, refer to the following sections in the [pkg/razorpay/README.md](../pkg/razorpay/README.md):

- **Tool Structure**: See the "Tool Structure" section for the function template
- **Parameter Definition**: See the "Parameter Definition" section for defining parameters
- **Parameter Validation**: See the "Parameter Validation" section for validation examples
- **Example GET/POST Endpoints**: See the example sections for complete implementation patterns
- **Unit Testing**: See the "Writing Unit Tests" section for test patterns and best practices

## ⚠️ Common Issues & Troubleshooting ⚠️

### 1. Query Parameters in Mock Tests

The `mock.Endpoint` struct does NOT have a queryParams field:

```go
type Endpoint struct {
    Path     string
    Method   string
    Response interface{}
}
```

### 1. Query Parameter Limitations in Mock Tests

The mock server doesn't validate query parameters. When testing endpoints with query parameters:

```go
// DOESN'T WORK - Gorilla Mux treats this as a literal path ❌
mock.Endpoint{
    Path:     apiPath + "?count=2&from=123&skip=1",
    Method:   "GET",
    Response: successResponse,
}

// WORKS - Use only the base path ✅
mock.Endpoint{
    Path:     apiPath,  // Only the base path without query parameters
    Method:   "GET",
    Response: successResponse,
}
```

### 2. Line Length Linter Errors

When encountering line length errors ("The line is X characters long, which exceeds the maximum of Y characters"):

1. Option 1: Add `//nolint:lll` comment at the end of the line:
```go
return mcpgo.NewTool(
    "tool_name",
    "This is a very long description that exceeds the line length limit", //nolint:lll
    parameters,
    handler,
)
```

2. Option 2: Break the string into multiple concatenated lines:
```go
return mcpgo.NewTool(
    "tool_name",
    "This is a very long description " +
        "that exceeds the line length limit",
    parameters,
    handler,
)
```

3. Option 3: For comments, split into multiple comment lines:
```go
// This is a very long comment that would exceed the line length limit
// so it's split into multiple lines.
func ToolName() {}
```

### 3. Missing Steps in the Implementation Checklist

IMPORTANT: The Implementation Checklist MUST be complete before submitting. Pay particular attention to these required steps:

- [ ] Run linter and fix errors if any (REQUIRED)
- [ ] Run tests and fix errors if any (REQUIRED)

If any checklist items remain unchecked, complete them before proceeding. The implementation is considered incomplete until all required steps are addressed.


## ⚠️ Required Verification Steps ⚠️

After implementing code changes, ALWAYS perform these verification steps:

1. You **MUST** run the linter to ensure code quality:
  ```
  run_terminal_cmd golangci-lint run
  ```
  Fix any issues reported by the linter. Try at least two iterations of fixes for the errors before giving up.

2. You **MUST** run tests to verify functionality:
  ```
  run_terminal_cmd go test ./...
  ```
  Ensure all tests pass. If any tests fail, investigate the failures and fix the issues. Try at least two iterations of fixes for the errors before giving up.