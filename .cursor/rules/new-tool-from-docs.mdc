---
description: 
globs: 
alwaysApply: true
---

# Razorpay Tool Generator

This rule generates tool implementations for the Razorpay MCP server based on API documentation.

## Required Format

This rule requires:

1. A Razorpay API documentation URL starting with `https://razorpay.com/docs/api/`
2. The SDK function signature that the tool will call

Example of valid invocation:
```
@new-tool-from-docs.mdc @https://razorpay.com/docs/api/payment-links/create-standard/
SDK function:
func (pl *PaymentLink) Create(data map[string]interface{}, extraHeaders map[string]string) (map[string]interface{}, error) {
    url := fmt.Sprintf("/%s%s", constants.VERSION_V1, constants.PaymentLink_URL)
    return pl.Request.Post(url, data, extraHeaders)
}
```

If these details are missing or in an incorrect format, the rule cannot be properly applied. Rerun with the correct format shown above.

## Implementation Process

This rule follows the detailed implementation guide in [pkg/razorpay/README.md](../pkg/razorpay/README.md) for creating tools.

The generation process:

1. Extracts from API documentation:
   - Required and optional parameters
   - Parameter descriptions
   - Example request/response payloads

2. Extracts from SDK function:
   - Resource type (payments, orders, payment_links, etc.)
   - Action type (create, fetch, update, etc.)
   - HTTP method (GET, POST, etc.)
   - API path constants

3. Generates:
   - Tool function with parameter definitions
   - Handler implementation with validation logic
   - API call using the provided SDK function
   - Unit tests with positive and negative cases

## Tool Implementation Pattern

```go
// ToolName returns a tool that [description from docs]
func ToolName(
    log *slog.Logger,
    client *rzpsdk.Client,
) mcpgo.Tool {
    parameters := []mcpgo.ToolParameter{
        // Parameters extracted from documentation
        mcpgo.WithString(
            "parameter_name",
            mcpgo.Description("Description from API docs"),
            mcpgo.Required(),
        ),
        // Additional parameters...
    }

    handler := func(
        ctx context.Context,
        r mcpgo.CallToolRequest,
    ) (*mcpgo.ToolResult, error) {
        // Parameter validation
        paramValue, err := RequiredParam[string](r, "parameter_name")
        if result, err := HandleValidationError(err); result != nil {
            return result, err
        }

        // Construct data payload
        data := map[string]interface{}{
            "key": paramValue,
            // Additional fields...
        }

        // SDK call based on provided function signature
        response, err := client.Resource.Method(data, nil)
        if err != nil {
            return mcpgo.NewToolResultError(
                fmt.Sprintf("operation failed: %s", err.Error())), nil
        }

        return mcpgo.NewToolResultJSON(response)
    }

    return mcpgo.NewTool(
        "tool_name", // Generated from resource and action
        "Description from API docs",
        parameters,
        handler,
    )
}
```

## Test Implementation Pattern

```go
func Test_ToolName(t *testing.T) {
    // Define API path based on SDK function's constants
    apiPath := fmt.Sprintf("/%s%s", constants.VERSION_V1, constants.RESOURCE_URL)

    // Define mock responses using example from documentation
    successResponse := map[string]interface{}{
        // Fields from documentation example response
    }

    // Define test cases
    tests := []RazorpayToolTestCase{
        {
            Name: "successful case with all parameters",
            Request: map[string]interface{}{
                // Parameters from documentation example
            },
            MockHttpClient: func() (*http.Client, *httptest.Server) {
                return mock.NewHTTPClient(
                    mock.Endpoint{
                        Path:     apiPath,
                        Method:   "POST", // or "GET" based on SDK function
                        Response: successResponse,
                    },
                )
            },
            ExpectError:    false,
            ExpectedResult: successResponse,
        },
        // Negative test cases for required parameters
    }

    // Run the tests
    for _, tc := range tests {
        t.Run(tc.Name, func(t *testing.T) {
            runToolTest(t, tc, ToolFunction, "Resource Name")
        })
    }
}
```

## Registration Steps

After generating the tool:

1. Add it to the appropriate toolset in `pkg/razorpay/tools.go`
2. Update the README.md to document the new tool
3. Run tests to verify functionality

## Reference URLs

- [Razorpay Go SDK Constants](https://github.com/razorpay/razorpay-go/blob/master/constants/url.go) - Use these constants for API paths
- [Razorpay API Documentation](https://razorpay.com/docs/api/) - Source of parameter information